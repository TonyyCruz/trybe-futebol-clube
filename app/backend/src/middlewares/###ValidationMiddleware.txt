import { Request, Response, NextFunction } from 'express';
import HttpError from '../utils/HttpError';
import loginInterface from '../interfaces/login';

export default class ValidationMiddleware {
  constructor(
    public req: Request,
    public res: Response,
    public next: NextFunction,
  ) { this.validateController(req.path); }
  
  private validateController(path: string) {
    switch (path) {
      case 'login':
        return this.loginValidation();
      default:
        this.next();
    }
  }

  static validateEmail(email: string): void {
    const regexEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

    const emailVerify: boolean = regexEmail.test(email);
    if (!emailVerify) throw new HttpError(400, 'Invalid email');
  }

  public loginValidation(): void {
    const userData: loginInterface = this.req.body;
    const { password, email } = userData;

    if (password.length <= 6) {
      throw new HttpError(400, 'Password need to have at least 6 characters');
    }
    ValidationMiddleware.validateEmail(email);
    this.next();
  }
}
